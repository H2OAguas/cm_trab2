// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/classificacao.dart';
import 'models/competicao.dart';
import 'models/equipa.dart';
import 'models/hist_contrat.dart';
import 'models/jogador.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8972932823419575406),
      name: 'Jogador',
      lastPropertyId: const IdUid(7, 4831223473396267343),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7163399439666841109),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4707789078657183859),
            name: 'nome',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9169566408216165407),
            name: 'idade',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4339293379490927638),
            name: 'ativo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4831223473396267343),
            name: 'dataUltCtrlDopp',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 9072562209263126501),
      name: 'Competicao',
      lastPropertyId: const IdUid(8, 7161359681188427782),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 7137047256600000279),
            name: 'nJornada',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 725621625094543486),
            name: 'idEquipaCasa',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 910157218329785670),
            name: 'idEquipaVisitante',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4078164267866325604),
            name: 'golosCasa',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6747309186930870646),
            name: 'golosVisitante',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2788281637241128134),
            name: 'resultado',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7161359681188427782),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2788271258435338794),
      name: 'Equipa',
      lastPropertyId: const IdUid(3, 238864783194514911),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4855782462247883110),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7967361771694277208),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 2260627275348808010),
      name: 'HistContrat',
      lastPropertyId: const IdUid(11, 662421887893855742),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 21012146601099868),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5628552456547343869),
            name: 'dataInicio',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5565346162491625494),
            name: 'dataFinal',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7796295945158346585),
            name: 'idJogador',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 662421887893855742),
            name: 'idEquipa',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 3261633347440838013),
      name: 'Classificacao',
      lastPropertyId: const IdUid(6, 8077557861308335512),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3601493942002101230),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4829736046442035921),
            name: 'liga',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5695114131003981800),
            name: 'nomeEquipa',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2197112126356310430),
            name: 'pontos',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8077557861308335512),
            name: 'jornada',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 3261633347440838013),
      lastIndexId: const IdUid(7, 4759506710432874446),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        6313852157099151628,
        7686609033112063034,
        1620774719572104008,
        4355820364049297143,
        8919639583425175720,
        1038537645515602927,
        4759506710432874446
      ],
      retiredPropertyUids: const [
        4047990216589533145,
        6738125368053111043,
        846778003106887697,
        238864783194514911,
        2700003855852599396,
        1034020601163927219,
        8891470639353705203,
        6037669145669319941,
        6439827549941111654,
        7944107839922393618,
        8892422805912889241
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Jogador: EntityDefinition<Jogador>(
        model: _entities[0],
        toOneRelations: (Jogador object) => [],
        toManyRelations: (Jogador object) => {},
        getId: (Jogador object) => object.id,
        setId: (Jogador object, int id) {
          object.id = id;
        },
        objectToFB: (Jogador object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final idadeOffset =
              object.idade == null ? null : fbb.writeString(object.idade!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, idadeOffset);
          fbb.addBool(5, object.ativo);
          fbb.addInt64(6, object.dataUltCtrlDopp?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataUltCtrlDoppValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = Jogador(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              dataUltCtrlDoppValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dataUltCtrlDoppValue),
              ativo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Competicao: EntityDefinition<Competicao>(
        model: _entities[1],
        toOneRelations: (Competicao object) => [],
        toManyRelations: (Competicao object) => {},
        getId: (Competicao object) => object.id,
        setId: (Competicao object, int id) {
          object.id = id;
        },
        objectToFB: (Competicao object, fb.Builder fbb) {
          final resultadoOffset = fbb.writeString(object.resultado);
          fbb.startTable(9);
          fbb.addInt64(1, object.nJornada);
          fbb.addInt64(2, object.idEquipaCasa);
          fbb.addInt64(3, object.idEquipaVisitante);
          fbb.addInt64(4, object.golosCasa);
          fbb.addInt64(5, object.golosVisitante);
          fbb.addOffset(6, resultadoOffset);
          fbb.addInt64(7, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Competicao(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              idEquipaCasa:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              idEquipaVisitante:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              golosCasa:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              golosVisitante:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    Equipa: EntityDefinition<Equipa>(
        model: _entities[2],
        toOneRelations: (Equipa object) => [],
        toManyRelations: (Equipa object) => {},
        getId: (Equipa object) => object.id,
        setId: (Equipa object, int id) {
          object.id = id;
        },
        objectToFB: (Equipa object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Equipa(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    HistContrat: EntityDefinition<HistContrat>(
        model: _entities[3],
        toOneRelations: (HistContrat object) => [],
        toManyRelations: (HistContrat object) => {},
        getId: (HistContrat object) => object.id,
        setId: (HistContrat object, int id) {
          object.id = id;
        },
        objectToFB: (HistContrat object, fb.Builder fbb) {
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataInicio?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.dataFinal?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.idJogador);
          fbb.addInt64(10, object.idEquipa);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataInicioValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dataFinalValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = HistContrat(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idJogador:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              idEquipa:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              dataInicio: dataInicioValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dataInicioValue),
              dataFinal: dataFinalValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dataFinalValue));

          return object;
        }),
    Classificacao: EntityDefinition<Classificacao>(
        model: _entities[4],
        toOneRelations: (Classificacao object) => [],
        toManyRelations: (Classificacao object) => {},
        getId: (Classificacao object) => object.id,
        setId: (Classificacao object, int id) {
          object.id = id;
        },
        objectToFB: (Classificacao object, fb.Builder fbb) {
          final ligaOffset = fbb.writeString(object.liga);
          final nomeEquipaOffset = fbb.writeString(object.nomeEquipa);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ligaOffset);
          fbb.addOffset(2, nomeEquipaOffset);
          fbb.addInt64(3, object.pontos);
          fbb.addInt64(5, object.jornada);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Classificacao(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              liga: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nomeEquipa: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              pontos:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              jornada:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Jogador] entity fields to define ObjectBox queries.
class Jogador_ {
  /// see [Jogador.id]
  static final id = QueryIntegerProperty<Jogador>(_entities[0].properties[0]);

  /// see [Jogador.nome]
  static final nome = QueryStringProperty<Jogador>(_entities[0].properties[1]);

  /// see [Jogador.idade]
  static final idade = QueryStringProperty<Jogador>(_entities[0].properties[2]);

  /// see [Jogador.ativo]
  static final ativo =
      QueryBooleanProperty<Jogador>(_entities[0].properties[3]);

  /// see [Jogador.dataUltCtrlDopp]
  static final dataUltCtrlDopp =
      QueryIntegerProperty<Jogador>(_entities[0].properties[4]);
}

/// [Competicao] entity fields to define ObjectBox queries.
class Competicao_ {
  /// see [Competicao.nJornada]
  static final nJornada =
      QueryIntegerProperty<Competicao>(_entities[1].properties[0]);

  /// see [Competicao.idEquipaCasa]
  static final idEquipaCasa =
      QueryIntegerProperty<Competicao>(_entities[1].properties[1]);

  /// see [Competicao.idEquipaVisitante]
  static final idEquipaVisitante =
      QueryIntegerProperty<Competicao>(_entities[1].properties[2]);

  /// see [Competicao.golosCasa]
  static final golosCasa =
      QueryIntegerProperty<Competicao>(_entities[1].properties[3]);

  /// see [Competicao.golosVisitante]
  static final golosVisitante =
      QueryIntegerProperty<Competicao>(_entities[1].properties[4]);

  /// see [Competicao.resultado]
  static final resultado =
      QueryStringProperty<Competicao>(_entities[1].properties[5]);

  /// see [Competicao.id]
  static final id =
      QueryIntegerProperty<Competicao>(_entities[1].properties[6]);
}

/// [Equipa] entity fields to define ObjectBox queries.
class Equipa_ {
  /// see [Equipa.id]
  static final id = QueryIntegerProperty<Equipa>(_entities[2].properties[0]);

  /// see [Equipa.nome]
  static final nome = QueryStringProperty<Equipa>(_entities[2].properties[1]);
}

/// [HistContrat] entity fields to define ObjectBox queries.
class HistContrat_ {
  /// see [HistContrat.id]
  static final id =
      QueryIntegerProperty<HistContrat>(_entities[3].properties[0]);

  /// see [HistContrat.dataInicio]
  static final dataInicio =
      QueryIntegerProperty<HistContrat>(_entities[3].properties[1]);

  /// see [HistContrat.dataFinal]
  static final dataFinal =
      QueryIntegerProperty<HistContrat>(_entities[3].properties[2]);

  /// see [HistContrat.idJogador]
  static final idJogador =
      QueryIntegerProperty<HistContrat>(_entities[3].properties[3]);

  /// see [HistContrat.idEquipa]
  static final idEquipa =
      QueryIntegerProperty<HistContrat>(_entities[3].properties[4]);
}

/// [Classificacao] entity fields to define ObjectBox queries.
class Classificacao_ {
  /// see [Classificacao.id]
  static final id =
      QueryIntegerProperty<Classificacao>(_entities[4].properties[0]);

  /// see [Classificacao.liga]
  static final liga =
      QueryStringProperty<Classificacao>(_entities[4].properties[1]);

  /// see [Classificacao.nomeEquipa]
  static final nomeEquipa =
      QueryStringProperty<Classificacao>(_entities[4].properties[2]);

  /// see [Classificacao.pontos]
  static final pontos =
      QueryIntegerProperty<Classificacao>(_entities[4].properties[3]);

  /// see [Classificacao.jornada]
  static final jornada =
      QueryIntegerProperty<Classificacao>(_entities[4].properties[4]);
}
